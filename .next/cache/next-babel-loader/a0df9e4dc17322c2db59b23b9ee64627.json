{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/macbook/Git/random-project/components/random/WheelName/WheelName.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { RandomWheelName } from '../../../utils';\nvar colors = ['#00E8FC', '#F96E46', '#F9C846', '#FFE3E3'];\n\nvar WheelName = function WheelName(props) {\n  _s();\n\n  console.log('RandomWheelName', RandomWheelName);\n\n  var _useState = useState(''),\n      names = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState({\n    el: '#wheel',\n    // Canvas ID\n    members: [],\n    // Array of members\n    colors: [],\n    // Background color of each member\n    radius: 250 // wheel radius\n\n  }),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  useEffect(function () {\n    var wheel = new RandomWheelName(options);\n    wheel.init();\n  }, [options]);\n\n  var convertValue = function convertValue(value) {\n    if (!value) {\n      return;\n    }\n\n    var arr = value.split('/n');\n  };\n\n  var onChange = function onChange(e) {\n    var value = e.target.value;\n    setName(value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"canvas\", {\n    id: \"wheel\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(\"textarea\", {\n    name: 'name',\n    value: names,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(WheelName, \"x6S9s+SGjA1yhkOKD4Mqu+yZc3c=\");\n\n_c = WheelName;\nWheelName.propTypes = {};\nexport default WheelName;\n\nvar _c;\n\n$RefreshReg$(_c, \"WheelName\");","map":{"version":3,"sources":["/Users/macbook/Git/random-project/components/random/WheelName/WheelName.js"],"names":["React","useEffect","useState","PropTypes","RandomWheelName","colors","WheelName","props","console","log","names","setName","el","members","radius","options","setOptions","wheel","init","convertValue","value","arr","split","onChange","e","target","propTypes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,IAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAf;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA;;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,eAA/B;;AAD2B,kBAGFF,QAAQ,CAAC,EAAD,CAHN;AAAA,MAGpBQ,KAHoB;AAAA,MAGbC,OAHa;;AAAA,mBAIGT,QAAQ,CAAC;AACrCU,IAAAA,EAAE,EAAE,QADiC;AACvB;AACdC,IAAAA,OAAO,EAAE,EAF4B;AAExB;AACbR,IAAAA,MAAM,EAAE,EAH6B;AAGzB;AACZS,IAAAA,MAAM,EAAE,GAJ6B,CAIxB;;AAJwB,GAAD,CAJX;AAAA,MAIpBC,OAJoB;AAAA,MAIXC,UAJW;;AAW3Bf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,KAAK,GAAG,IAAIb,eAAJ,CAAoBW,OAApB,CAAZ;AACAE,IAAAA,KAAK,CAACC,IAAN;AACD,GAHQ,EAGN,CAACH,OAAD,CAHM,CAAT;;AAKA,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,QAAMC,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAZ;AACD,GAND;;AAQA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AAAA,QACdJ,KADc,GACJI,CAAC,CAACC,MADE,CACdL,KADc;AAEtBT,IAAAA,OAAO,CAACS,KAAD,CAAP;AACD,GAHD;;AAKA,SACE,4BACE;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAU,IAAA,IAAI,EAAE,MAAhB;AAAwB,IAAA,KAAK,EAAEV,KAA/B;AAAsC,IAAA,QAAQ,EAAEa,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAnCD;;GAAMjB,S;;KAAAA,S;AAqCNA,SAAS,CAACoB,SAAV,GAAsB,EAAtB;AAEA,eAAepB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { RandomWheelName } from '../../../utils';\n\nconst colors = ['#00E8FC', '#F96E46', '#F9C846', '#FFE3E3'];\n\nconst WheelName = (props) => {\n  console.log('RandomWheelName', RandomWheelName);\n\n  const [names, setName] = useState('');\n  const [options, setOptions] = useState({\n    el: '#wheel', // Canvas ID\n    members: [], // Array of members\n    colors: [], // Background color of each member\n    radius: 250, // wheel radius\n  });\n\n  useEffect(() => {\n    var wheel = new RandomWheelName(options);\n    wheel.init();\n  }, [options]);\n\n  const convertValue = (value) => {\n    if (!value) {\n      return;\n    }\n\n    const arr = value.split('/n');\n  };\n\n  const onChange = (e) => {\n    const { value } = e.target;\n    setName(value);\n  };\n\n  return (\n    <>\n      <canvas id='wheel'></canvas>\n      <textarea name={'name'} value={names} onChange={onChange}></textarea>\n    </>\n  );\n};\n\nWheelName.propTypes = {};\n\nexport default WheelName;\n"]},"metadata":{},"sourceType":"module"}