{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Git/random-project/components/random/WheelName/WheelName.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { RandomWheelName } from '../../../utils';\nimport './WheelName.scss';\nconst colors = ['#00E8FC', '#F96E46', '#F9C846', '#FFE3E3'];\n\nconst WheelName = props => {\n  console.log('RandomWheelName', RandomWheelName);\n  const {\n    0: names,\n    1: setName\n  } = useState('');\n  const {\n    0: options,\n    1: setOptions\n  } = useState({\n    el: '#wheel',\n    // Canvas ID\n    members: [],\n    // Array of members\n    colors: [],\n    // Background color of each member\n    radius: 250 // wheel radius\n\n  });\n  useEffect(() => {\n    var wheel = new RandomWheelName(options);\n    wheel.init();\n  }, [options]);\n\n  const convertValue = value => {\n    if (!value) {\n      return setOptions(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        members: [],\n        colors: []\n      }));\n    }\n\n    const arr = value.split('\\n');\n    const colors = arr.map((_, index) => colors[index % 4]);\n    setOptions(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      members: [],\n      colors: []\n    }));\n    console.log(arr);\n  };\n\n  const onChange = e => {\n    const {\n      value\n    } = e.target;\n    convertValue(value);\n    setName(value);\n  };\n\n  return __jsx(\"div\", {\n    className: \"random-wheel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(\"canvas\", {\n    id: \"wheel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), __jsx(\"textarea\", {\n    className: \"textarea\",\n    name: 'name',\n    value: names,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }));\n};\n\nWheelName.propTypes = {};\nexport default WheelName;","map":{"version":3,"sources":["/Users/macbook/Git/random-project/components/random/WheelName/WheelName.js"],"names":["React","useEffect","useState","PropTypes","RandomWheelName","colors","WheelName","props","console","log","names","setName","options","setOptions","el","members","radius","wheel","init","convertValue","value","prev","arr","split","map","_","index","onChange","e","target","propTypes"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,OAAO,kBAAP;AAEA,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAf;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,eAA/B;AAEA,QAAM;AAAA,OAACM,KAAD;AAAA,OAAQC;AAAR,MAAmBT,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC;AACrCY,IAAAA,EAAE,EAAE,QADiC;AACvB;AACdC,IAAAA,OAAO,EAAE,EAF4B;AAExB;AACbV,IAAAA,MAAM,EAAE,EAH6B;AAGzB;AACZW,IAAAA,MAAM,EAAE,GAJ6B,CAIxB;;AAJwB,GAAD,CAAtC;AAOAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,KAAK,GAAG,IAAIb,eAAJ,CAAoBQ,OAApB,CAAZ;AACAK,IAAAA,KAAK,CAACC,IAAN;AACD,GAHQ,EAGN,CAACN,OAAD,CAHM,CAAT;;AAKA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAI,CAACA,KAAL,EAAY;AACV,aAAOP,UAAU,CAAEQ,IAAD,oCAAgBA,IAAhB;AAAsBN,QAAAA,OAAO,EAAE,EAA/B;AAAmCV,QAAAA,MAAM,EAAE;AAA3C,QAAD,CAAjB;AACD;;AAED,UAAMiB,GAAG,GAAGF,KAAK,CAACG,KAAN,CAAY,IAAZ,CAAZ;AAEA,UAAMlB,MAAM,GAAGiB,GAAG,CAACE,GAAJ,CAAQ,CAACC,CAAD,EAAIC,KAAJ,KAAcrB,MAAM,CAACqB,KAAK,GAAG,CAAT,CAA5B,CAAf;AAEAb,IAAAA,UAAU,CAAEQ,IAAD,oCAAgBA,IAAhB;AAAsBN,MAAAA,OAAO,EAAE,EAA/B;AAAmCV,MAAAA,MAAM,EAAE;AAA3C,MAAD,CAAV;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACD,GAZD;;AAcA,QAAMK,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAM;AAAER,MAAAA;AAAF,QAAYQ,CAAC,CAACC,MAApB;AACAV,IAAAA,YAAY,CAACC,KAAD,CAAZ;AACAT,IAAAA,OAAO,CAACS,KAAD,CAAP;AACD,GAJD;;AAMA,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAU,IAAA,SAAS,EAAC,UAApB;AAA+B,IAAA,IAAI,EAAE,MAArC;AAA6C,IAAA,KAAK,EAAEV,KAApD;AAA2D,IAAA,QAAQ,EAAEiB,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA1CD;;AA4CArB,SAAS,CAACwB,SAAV,GAAsB,EAAtB;AAEA,eAAexB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { RandomWheelName } from '../../../utils';\n\nimport './WheelName.scss';\n\nconst colors = ['#00E8FC', '#F96E46', '#F9C846', '#FFE3E3'];\n\nconst WheelName = (props) => {\n  console.log('RandomWheelName', RandomWheelName);\n\n  const [names, setName] = useState('');\n  const [options, setOptions] = useState({\n    el: '#wheel', // Canvas ID\n    members: [], // Array of members\n    colors: [], // Background color of each member\n    radius: 250, // wheel radius\n  });\n\n  useEffect(() => {\n    var wheel = new RandomWheelName(options);\n    wheel.init();\n  }, [options]);\n\n  const convertValue = (value) => {\n    if (!value) {\n      return setOptions((prev) => ({ ...prev, members: [], colors: [] }));\n    }\n\n    const arr = value.split('\\n');\n\n    const colors = arr.map((_, index) => colors[index % 4]);\n\n    setOptions((prev) => ({ ...prev, members: [], colors: [] }));\n\n    console.log(arr);\n  };\n\n  const onChange = (e) => {\n    const { value } = e.target;\n    convertValue(value);\n    setName(value);\n  };\n\n  return (\n    <div className='random-wheel'>\n      <canvas id='wheel'></canvas>\n      <textarea className='textarea' name={'name'} value={names} onChange={onChange}></textarea>\n    </div>\n  );\n};\n\nWheelName.propTypes = {};\n\nexport default WheelName;\n"]},"metadata":{},"sourceType":"module"}