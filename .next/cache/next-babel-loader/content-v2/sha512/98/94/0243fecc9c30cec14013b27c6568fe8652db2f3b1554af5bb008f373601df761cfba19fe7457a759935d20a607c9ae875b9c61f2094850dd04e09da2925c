{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { RandomWheelName } from '../../../utils';\nimport './WheelName.scss';\nconst colors = ['#3369E8', '#D61026', '#EEB213', '#029926'];\n\nconst WheelName = props => {\n  console.log('RandomWheelName', RandomWheelName);\n  const {\n    0: wheel,\n    1: setWheel\n  } = useState();\n  const {\n    0: names,\n    1: setName\n  } = useState('Trung\\nTiên\\nGiang\\nTuyên');\n  const {\n    0: options,\n    1: setOptions\n  } = useState({\n    el: '#wheel',\n    // Canvas ID\n    members: [],\n    // Array of members\n    colors: [],\n    // Background color of each member\n    radius: 250 // wheel radius\n\n  });\n  useEffect(() => {\n    const random = new RandomWheelName(options);\n    random.init();\n    setWheel(random);\n  }, [options]);\n  useEffect(() => {\n    convertValue(names);\n  }, [names]);\n\n  const convertValue = value => {\n    if (!value) {\n      return setOptions(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        members: [],\n        colors: []\n      }));\n    }\n\n    const arr = value.split('\\n');\n    let temp = arr.map((_, index) => colors[index % 4]);\n\n    for (let i = 0; i < arr.length; i++) {\n      if (!arr[i]) {\n        arr.splice(i, 1);\n        --i;\n      }\n    }\n\n    setOptions(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      members: arr,\n      colors: temp\n    }));\n  };\n\n  const onChange = e => {\n    const {\n      value\n    } = e.target;\n    setName(value);\n  };\n\n  const onWheel = () => {\n    wheel.spin(function (member) {\n      alert(member);\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"random-wheel\"\n  }, __jsx(\"div\", null, __jsx(\"canvas\", {\n    id: \"wheel\"\n  }), __jsx(\"button\", {\n    onClick: onWheel\n  }, \"QUAY\")), __jsx(\"textarea\", {\n    className: \"textarea\",\n    name: 'name',\n    value: names,\n    onChange: onChange\n  }));\n};\n\nexport default WheelName;","map":null,"metadata":{},"sourceType":"module"}