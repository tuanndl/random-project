{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(changeLanguage),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(translateWatcher);\n\nimport { takeLatest, put } from \"redux-saga/effects\";\nimport ActionCreators, { Types } from \"../actionCreators\";\nexport function changeLanguage(action) {\n  var language, translate, translationObj;\n  return _regeneratorRuntime.wrap(function changeLanguage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          language = action.language;\n\n          if (!language) {\n            _context.next = 16;\n            break;\n          }\n\n          _context.prev = 2;\n          translate = require(\"../../config/translates/\".concat(language, \".json\"));\n          console.log(\"=== Translate lang from folder: \", translate.language);\n          translationObj = {\n            translate: translate\n          };\n          _context.next = 8;\n          return put(ActionCreators.translationSuccess(translationObj));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 14;\n          return put(ActionCreators.translationFailure(\"Error to change language: \", _context.t0));\n\n        case 14:\n          _context.next = 18;\n          break;\n\n        case 16:\n          _context.next = 18;\n          return put(ActionCreators.translationFailure(\"There's no language selected.\"));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 10]]);\n}\nexport default function translateWatcher() {\n  return _regeneratorRuntime.wrap(function translateWatcher$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(Types.TRANSLATION_REQUEST, changeLanguage);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/macbook/Git/random-project/redux/sagas/translate.js"],"names":["changeLanguage","translateWatcher","takeLatest","put","ActionCreators","Types","action","language","translate","require","console","log","translationObj","translationSuccess","translationFailure","TRANSLATION_REQUEST"],"mappings":";;oDAIiBA,c;qDAqBQC,gB;;AAzBzB,SAASC,UAAT,EAAqBC,GAArB,QAAgC,oBAAhC;AAEA,OAAOC,cAAP,IAAyBC,KAAzB,QAAsC,mBAAtC;AAEA,OAAO,SAAUL,cAAV,CAAyBM,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,QADH,GACgBD,MADhB,CACGC,QADH;;AAAA,eAEDA,QAFC;AAAA;AAAA;AAAA;;AAAA;AAIKC,UAAAA,SAJL,GAIiBC,OAAO,mCAA4BF,QAA5B,WAJxB;AAKDG,UAAAA,OAAO,CAACC,GAAR,qCAAgDH,SAAS,CAACD,QAA1D;AAEMK,UAAAA,cAPL,GAOsB;AAAEJ,YAAAA,SAAS,EAATA;AAAF,WAPtB;AAAA;AAQD,iBAAML,GAAG,CAACC,cAAc,CAACS,kBAAf,CAAkCD,cAAlC,CAAD,CAAT;;AARC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUD,iBAAMT,GAAG,CACPC,cAAc,CAACU,kBAAf,CAAkC,4BAAlC,cADO,CAAT;;AAVC;AAAA;AAAA;;AAAA;AAAA;AAeH,iBAAMX,GAAG,CACPC,cAAc,CAACU,kBAAf,CAAkC,+BAAlC,CADO,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBP,eAAe,SAAUb,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,UAAU,CAACG,KAAK,CAACU,mBAAP,EAA4Bf,cAA5B,CAAhB;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put } from \"redux-saga/effects\";\n\nimport ActionCreators, { Types } from \"../actionCreators\";\n\nexport function* changeLanguage(action) {\n  const { language } = action;\n  if (language) {\n    try {\n      const translate = require(`../../config/translates/${language}.json`);\n      console.log(`=== Translate lang from folder: `, translate.language);\n\n      const translationObj = { translate };\n      yield put(ActionCreators.translationSuccess(translationObj));\n    } catch (err) {\n      yield put(\n        ActionCreators.translationFailure(\"Error to change language: \", err)\n      );\n    }\n  } else {\n    yield put(\n      ActionCreators.translationFailure(\"There's no language selected.\")\n    );\n  }\n}\n\nexport default function* translateWatcher() {\n  yield takeLatest(Types.TRANSLATION_REQUEST, changeLanguage);\n}\n"]},"metadata":{},"sourceType":"module"}