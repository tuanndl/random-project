webpackHotUpdate_N_E("pages/wheel-name",{

/***/ "./utils/randomWheel.js":
/*!******************************!*\
  !*** ./utils/randomWheel.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {(function (root) {\n  'use strict';\n\n  function _merge(obj1, obj2) {\n    var obj3 = {};\n\n    for (var attrname in obj1) {\n      obj3[attrname] = obj1[attrname];\n    }\n\n    for (var attrname in obj2) {\n      obj3[attrname] = obj2[attrname];\n    }\n\n    return obj3;\n  }\n\n  var PrizeWheel = function PrizeWheel(options) {\n    var _this = this,\n        defaults,\n        s,\n        ctx,\n        canvas;\n\n    defaults = {\n      el: null,\n      members: ['Member 1', 'Member 2', 'Member 3', 'Member 4'],\n      colors: ['#C7181D', '#FCB937', '#A1B836', '#371979', '#C7181D', '#FCB937', '#A1B836', '#371979'],\n      radius: 250,\n      startAngle: 0,\n      textRadius: 160\n    }; // s for settings\n\n    s = _merge(defaults, options);\n    s.width = s.height = s.radius * 2;\n    s.insideRadius = s.width / 5;\n    s.outsideRadius = s.width / 2 - 10;\n    s.startAngle = s.startAngle === 'random' ? Math.floor(Math.random() * 360) : s.startAngle;\n    s.arc = Math.PI / (s.members.length / (s.members.length / (s.members.length / 2)));\n    s.spinTimeout = null;\n    s.spinTime = 0;\n    s.spinTimeTotal = 0;\n    s.spinAngleStart = null;\n\n    this.draw = function () {\n      var angle, text, i;\n      canvas = document.querySelector(s.el);\n      canvas.width = s.width;\n      canvas.height = s.height;\n\n      if (canvas.getContext) {\n        ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, s.width, s.height);\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 2;\n        ctx.font = '16px sans-serif';\n\n        for (i = 0; i < s.members.length; i++) {\n          angle = s.startAngle + i * s.arc;\n          ctx.fillStyle = s.colors[i];\n          ctx.beginPath();\n          ctx.arc(s.width / 2, s.height / 2, s.outsideRadius, angle, angle + s.arc, false); //   ctx.arc(s.width / 2, s.height / 2, s.insideRadius, angle + s.arc, angle, true);\n\n          ctx.arc(s.width / 2, s.height / 2, s.insideRadius, angle + s.arc, angle, true);\n          ctx.stroke();\n          ctx.fill();\n          ctx.save();\n          ctx.shadowOffsetX = -1;\n          ctx.shadowOffsetY = -1;\n          ctx.shadowBlur = 0;\n          ctx.fillStyle = 'black';\n          ctx.translate(s.width / 2 + Math.cos(angle + s.arc / 2) * s.textRadius, s.height / 2 + Math.sin(angle + s.arc / 2) * s.textRadius);\n          ctx.rotate(s.angle + s.arc / 2 + Math.PI / 2);\n          text = s.members[i];\n          ctx.fillText(text, -ctx.measureText(text).width / 2, 0);\n          ctx.restore();\n        } //Arrow\n\n\n        ctx.fillStyle = 'black';\n        ctx.beginPath();\n        ctx.moveTo(s.radius - 4, s.radius - (s.outsideRadius + 5));\n        ctx.lineTo(s.radius + 4, s.radius - (s.outsideRadius + 5));\n        ctx.lineTo(s.radius + 4, s.radius - (s.outsideRadius - 5));\n        ctx.lineTo(s.radius + 9, s.radius - (s.outsideRadius - 5));\n        ctx.lineTo(s.radius + 0, s.radius - (s.outsideRadius - 13));\n        ctx.lineTo(s.radius - 9, s.radius - (s.outsideRadius - 5));\n        ctx.lineTo(s.radius - 4, s.radius - (s.outsideRadius - 5));\n        ctx.lineTo(s.radius - 4, s.radius - (s.outsideRadius + 5));\n        ctx.fill();\n      }\n    };\n\n    this.easeOut = function (t, b, c, d) {\n      var ts, tc;\n      ts = (t /= d) * t;\n      tc = ts * t;\n      return b + c * (tc + -3 * ts + 3 * t);\n    };\n\n    this.rotate = function () {\n      var spinAngle;\n      s.spinTime += 30;\n\n      if (s.spinTime + 5000 >= s.spinTimeTotal) {\n        _this.stop();\n\n        return;\n      }\n\n      spinAngle = s.spinAngleStart - _this.easeOut(s.spinTime, 0, s.spinAngleStart, s.spinTimeTotal);\n      s.startAngle += spinAngle * Math.PI / 180;\n\n      _this.draw();\n\n      s.spinTimeout = setTimeout(_this.rotate, 30);\n    };\n\n    this.spin = function (cb) {\n      _this.cb = cb;\n      s.spinAngleStart = Math.random() * 10 + 10;\n      s.spinTime = 0;\n      s.spinTimeTotal = Math.random() * 3 + 4 * 3000;\n\n      _this.rotate();\n    };\n\n    this.stop = function () {\n      var degrees;\n      var arcd;\n      var index;\n      clearTimeout(s.spinTimeout);\n      degrees = s.startAngle * 180 / Math.PI + 90;\n      arcd = s.arc * 180 / Math.PI;\n      index = Math.floor((360 - degrees % 360) / arcd);\n      ctx.save();\n\n      _this.done(s.members[index]);\n    };\n\n    this.done = function (member) {\n      _this.cb(member);\n    };\n\n    return {\n      init: _this.draw,\n      spin: _this.spin\n    };\n  };\n\n  if (true) {\n    if ( true && module.exports) {\n      exports = module.exports = PrizeWheel;\n    }\n\n    exports.PrizeWheel = PrizeWheel;\n  } else {}\n})(this);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvcmFuZG9tV2hlZWwuanM/NzY3NSJdLCJuYW1lcyI6WyJyb290IiwiX21lcmdlIiwib2JqMSIsIm9iajIiLCJvYmozIiwiYXR0cm5hbWUiLCJQcml6ZVdoZWVsIiwib3B0aW9ucyIsIl90aGlzIiwiZGVmYXVsdHMiLCJzIiwiY3R4IiwiY2FudmFzIiwiZWwiLCJtZW1iZXJzIiwiY29sb3JzIiwicmFkaXVzIiwic3RhcnRBbmdsZSIsInRleHRSYWRpdXMiLCJ3aWR0aCIsImhlaWdodCIsImluc2lkZVJhZGl1cyIsIm91dHNpZGVSYWRpdXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhcmMiLCJQSSIsImxlbmd0aCIsInNwaW5UaW1lb3V0Iiwic3BpblRpbWUiLCJzcGluVGltZVRvdGFsIiwic3BpbkFuZ2xlU3RhcnQiLCJkcmF3IiwiYW5nbGUiLCJ0ZXh0IiwiaSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImZvbnQiLCJmaWxsU3R5bGUiLCJiZWdpblBhdGgiLCJzdHJva2UiLCJmaWxsIiwic2F2ZSIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93Qmx1ciIsInRyYW5zbGF0ZSIsImNvcyIsInNpbiIsInJvdGF0ZSIsImZpbGxUZXh0IiwibWVhc3VyZVRleHQiLCJyZXN0b3JlIiwibW92ZVRvIiwibGluZVRvIiwiZWFzZU91dCIsInQiLCJiIiwiYyIsImQiLCJ0cyIsInRjIiwic3BpbkFuZ2xlIiwic3RvcCIsInNldFRpbWVvdXQiLCJzcGluIiwiY2IiLCJkZWdyZWVzIiwiYXJjZCIsImluZGV4IiwiY2xlYXJUaW1lb3V0IiwiZG9uZSIsIm1lbWJlciIsImluaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSwrQ0FBQyxVQUFVQSxJQUFWLEVBQWdCO0FBQ2Y7O0FBRUEs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Q0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLEVBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ2lELE1BQUosQ0FBV2xELENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQXRCLEVBQXlCTixDQUFDLENBQUNNLE1BQUYsSUFBWU4sQ0FBQyxDQUFDWSxhQUFGLEdBQWtCLENBQTlCLENBQXpCO0FBQ0FYLFdBQUcsQ0FBQ29DLElBQUo7QUFDRDtBQUNGLEtBdEREOztBQXdEQSxTQUFLYyxPQUFMLEdBQWUsVUFBVUMsQ0FB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QUFQLEdBQWlCM0UsVUFBM0I7QUFDRDs7QUFDRDJFLFdBQU8sQ0FBQzNFLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0QsR0FMRCxNQUtPLEVBTU47QUFDRixDQTlLRCxFQThLRyxJQTlLSCIsImZpbGUiOiIuL3V0aWxzL3JhbmRvbVdoZWVsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfbWVyZ2Uob2JqMSwgb2JqMikge1xuICAgIHZhciBvYmozID0ge307XG4gICAgZm9yICh2YXIgYXR0cm5hbWUgaW4gb2JqMSkge1xuICAgICAgb2JqM1thdHRybmFtZV0gPSBvYmoxW2F0dHJuYW1lXTtcbiAgICB9XG4gICAgZm9yICh2YXIgYXR0cm5hbWUgaW4gb2JqMikge1xuICAgICAgb2JqM1thdHRybmFtZV0gPSBvYmoyW2F0dHJuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajM7XG4gIH1cblxuICB2YXIgUHJpemVXaGVlbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgIGRlZmF1bHRzLFxuICAgICAgcyxcbiAgICAgIGN0eCxcbiAgICAgIGNhbnZhcztcblxuICAgIGRlZmF1bHRzID0ge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBtZW1iZXJzOiBbJ01lbWJlciAxJywgJ01lbWJlciAyJywgJ01lbWJlciAzJywgJ01lbWJlciA0J10sXG4gICAgICBjb2xvcnM6IFtcbiAgICAgICAgJyNDNzE4MUQnLFxuICAgICAgICAnI0ZDQjkzNycsXG4gICAgICAgICcjQTFCODM2JyxcbiAgICAgICAgJyMzNzE5NzknLFxuICAgICAgICAnI0M3MTgxRCcsXG4gICAgICAgICcjRkNCOTM3JyxcbiAgICAgICAgJyNBMUI4MzYnLFxuICAgICAgICAnIzM3MTk3OScsXG4gICAgICBdLFxuICAgICAgcmFkaXVzOiAyNTAsXG4gICAgICBzdGFydEFuZ2xlOiAwLFxuICAgICAgdGV4dFJhZGl1czogMTYwLFxuICAgIH07XG5cbiAgICAvLyBzIGZvciBzZXR0aW5nc1xuICAgIHMgPSBfbWVyZ2UoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgcy53aWR0aCA9IHMuaGVpZ2h0ID0gcy5yYWRpdXMgKiAyO1xuICAgIHMuaW5zaWRlUmFkaXVzID0gcy53aWR0aCAvIDU7XG4gICAgcy5vdXRzaWRlUmFkaXVzID0gcy53aWR0aCAvIDIgLSAxMDtcblxuICAgIHMuc3RhcnRBbmdsZSA9IHMuc3RhcnRBbmdsZSA9PT0gJ3JhbmRvbScgPyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjApIDogcy5zdGFydEFuZ2xlO1xuICAgIHMuYXJjID0gTWF0aC5QSSAvIChzLm1lbWJlcnMubGVuZ3RoIC8gKHMubWVtYmVycy5sZW5ndGggLyAocy5tZW1iZXJzLmxlbmd0aCAvIDIpKSk7XG4gICAgcy5zcGluVGltZW91dCA9IG51bGw7XG4gICAgcy5zcGluVGltZSA9IDA7XG4gICAgcy5zcGluVGltZVRvdGFsID0gMDtcbiAgICBzLnNwaW5BbmdsZVN0YXJ0ID0gbnVsbDtcblxuICAgIHRoaXMuZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhbmdsZSwgdGV4dCwgaTtcblxuICAgICAgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzLmVsKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHMud2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gcy5oZWlnaHQ7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQpIHtcbiAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgcy53aWR0aCwgcy5oZWlnaHQpO1xuXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuXG4gICAgICAgIGN0eC5mb250ID0gJzE2cHggc2Fucy1zZXJpZic7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHMubWVtYmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFuZ2xlID0gcy5zdGFydEFuZ2xlICsgaSAqIHMuYXJjO1xuXG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHMuY29sb3JzW2ldO1xuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICBjdHguYXJjKHMud2lkdGggLyAyLCBzLmhlaWdodCAvIDIsIHMub3V0c2lkZVJhZGl1cywgYW5nbGUsIGFuZ2xlICsgcy5hcmMsIGZhbHNlKTtcbiAgICAgICAgICAvLyAgIGN0eC5hcmMocy53aWR0aCAvIDIsIHMuaGVpZ2h0IC8gMiwgcy5pbnNpZGVSYWRpdXMsIGFuZ2xlICsgcy5hcmMsIGFuZ2xlLCB0cnVlKTtcbiAgICAgICAgICBjdHguYXJjKHMud2lkdGggLyAyLCBzLmhlaWdodCAvIDIsIHMuaW5zaWRlUmFkaXVzLCBhbmdsZSArIHMuYXJjLCBhbmdsZSwgdHJ1ZSk7XG4gICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gLTE7XG4gICAgICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAtMTtcbiAgICAgICAgICBjdHguc2hhZG93Qmx1ciA9IDA7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICAgICAgY3R4LnRyYW5zbGF0ZShcbiAgICAgICAgICAgIHMud2lkdGggLyAyICsgTWF0aC5jb3MoYW5nbGUgKyBzLmFyYyAvIDIpICogcy50ZXh0UmFkaXVzLFxuICAgICAgICAgICAgcy5oZWlnaHQgLyAyICsgTWF0aC5zaW4oYW5nbGUgKyBzLmFyYyAvIDIpICogcy50ZXh0UmFkaXVzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdHgucm90YXRlKHMuYW5nbGUgKyBzLmFyYyAvIDIgKyBNYXRoLlBJIC8gMik7XG4gICAgICAgICAgdGV4dCA9IHMubWVtYmVyc1tpXTtcbiAgICAgICAgICBjdHguZmlsbFRleHQodGV4dCwgLWN0eC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aCAvIDIsIDApO1xuICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL0Fycm93XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocy5yYWRpdXMgLSA0LCBzLnJhZGl1cyAtIChzLm91dHNpZGVSYWRpdXMgKyA1KSk7XG4gICAgICAgIGN0eC5saW5lVG8ocy5yYWRpdXMgKyA0LCBzLnJhZGl1cyAtIChzLm91dHNpZGVSYWRpdXMgKyA1KSk7XG4gICAgICAgIGN0eC5saW5lVG8ocy5yYWRpdXMgKyA0LCBzLnJhZGl1cyAtIChzLm91dHNpZGVSYWRpdXMgLSA1KSk7XG4gICAgICAgIGN0eC5saW5lVG8ocy5yYWRpdXMgKyA5LCBzLnJhZGl1cyAtIChzLm91dHNpZGVSYWRpdXMgLSA1KSk7XG4gICAgICAgIGN0eC5saW5lVG8ocy5yYWRpdXMgKyAwLCBzLnJhZGl1cyAtIChzLm91dHNpZGVSYWRpdXMgLSAxMykpO1xuICAgICAgICBjdHgubGluZVRvKHMucmFkaXVzIC0gOSwgcy5yYWRpdXMgLSAocy5vdXRzaWRlUmFkaXVzIC0gNSkpO1xuICAgICAgICBjdHgubGluZVRvKHMucmFkaXVzIC0gNCwgcy5yYWRpdXMgLSAocy5vdXRzaWRlUmFkaXVzIC0gNSkpO1xuICAgICAgICBjdHgubGluZVRvKHMucmFkaXVzIC0gNCwgcy5yYWRpdXMgLSAocy5vdXRzaWRlUmFkaXVzICsgNSkpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmVhc2VPdXQgPSBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgdmFyIHRzLCB0YztcblxuICAgICAgdHMgPSAodCAvPSBkKSAqIHQ7XG4gICAgICB0YyA9IHRzICogdDtcbiAgICAgIHJldHVybiBiICsgYyAqICh0YyArIC0zICogdHMgKyAzICogdCk7XG4gICAgfTtcblxuICAgIHRoaXMucm90YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNwaW5BbmdsZTtcbiAgICAgIHMuc3BpblRpbWUgKz0gMzA7XG4gICAgICBpZiAocy5zcGluVGltZSArIDUwMDAgPj0gcy5zcGluVGltZVRvdGFsKSB7XG4gICAgICAgIF90aGlzLnN0b3AoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3BpbkFuZ2xlID1cbiAgICAgICAgcy5zcGluQW5nbGVTdGFydCAtIF90aGlzLmVhc2VPdXQocy5zcGluVGltZSwgMCwgcy5zcGluQW5nbGVTdGFydCwgcy5zcGluVGltZVRvdGFsKTtcbiAgICAgIHMuc3RhcnRBbmdsZSArPSAoc3BpbkFuZ2xlICogTWF0aC5QSSkgLyAxODA7XG4gICAgICBfdGhpcy5kcmF3KCk7XG4gICAgICBzLnNwaW5UaW1lb3V0ID0gc2V0VGltZW91dChfdGhpcy5yb3RhdGUsIDMwKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zcGluID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICBfdGhpcy5jYiA9IGNiO1xuICAgICAgcy5zcGluQW5nbGVTdGFydCA9IE1hdGgucmFuZG9tKCkgKiAxMCArIDEwO1xuICAgICAgcy5zcGluVGltZSA9IDA7XG4gICAgICBzLnNwaW5UaW1lVG90YWwgPSBNYXRoLnJhbmRvbSgpICogMyArIDQgKiAzMDAwO1xuICAgICAgX3RoaXMucm90YXRlKCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkZWdyZWVzO1xuICAgICAgdmFyIGFyY2Q7XG4gICAgICB2YXIgaW5kZXg7XG5cbiAgICAgIGNsZWFyVGltZW91dChzLnNwaW5UaW1lb3V0KTtcbiAgICAgIGRlZ3JlZXMgPSAocy5zdGFydEFuZ2xlICogMTgwKSAvIE1hdGguUEkgKyA5MDtcbiAgICAgIGFyY2QgPSAocy5hcmMgKiAxODApIC8gTWF0aC5QSTtcbiAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoMzYwIC0gKGRlZ3JlZXMgJSAzNjApKSAvIGFyY2QpO1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIF90aGlzLmRvbmUocy5tZW1iZXJzW2luZGV4XSk7XG4gICAgfTtcblxuICAgIHRoaXMuZG9uZSA9IGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgIF90aGlzLmNiKG1lbWJlcik7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBpbml0OiBfdGhpcy5kcmF3LFxuICAgICAgc3BpbjogX3RoaXMuc3BpbixcbiAgICB9O1xuICB9O1xuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFByaXplV2hlZWw7XG4gICAgfVxuICAgIGV4cG9ydHMuUHJpemVXaGVlbCA9IFByaXplV2hlZWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUHJpemVXaGVlbDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByb290LlByaXplV2hlZWwgPSBQcml6ZVdoZWVsO1xuICB9XG59KSh0aGlzKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/randomWheel.js\n");

/***/ })

})